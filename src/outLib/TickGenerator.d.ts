import { IAnimation, ITickGenerator, ITickHandler, milliseconds } from "./Types";
import { EState } from "./Env";
import { ICallback, ISubscriptionLike } from "evg_observable/src/outLib/Types";
export declare class TickGenerator implements ITickGenerator, IAnimation, ITickHandler {
    private state$;
    private animationFrame$;
    private animationFrameAfter$;
    private animationFrameBefore$;
    private animationState$;
    private animationFrameTimer;
    private tickHandlerState$;
    private tick10$;
    private tick100$;
    private tick500$;
    private tick1000$;
    private tickTimer10;
    private tickTimer100;
    private tickTimer500;
    private tickTimer1000;
    private observablesPool;
    constructor();
    private init;
    private start;
    get state(): EState;
    stateSubscribe(callback: ICallback<any>): ISubscriptionLike<any>;
    destroy(): void;
    runAnimation(): void;
    stopAnimation(): void;
    get animationState(): EState;
    animationBeforeSubscribe(callback: ICallback<any>): ISubscriptionLike<any>;
    animationSubscribe(callback: ICallback<any>): ISubscriptionLike<any>;
    animationAfterSubscribe(callback: ICallback<any>): ISubscriptionLike<any>;
    animationStateSubscribe(callback: ICallback<any>): ISubscriptionLike<any>;
    runTickHandler(): void;
    stopTickHandler(): void;
    get tickHandlerState(): EState;
    interval1000Subscribe(callback: ICallback<any>): ISubscriptionLike<any>;
    interval500Subscribe(callback: ICallback<any>): ISubscriptionLike<any>;
    interval100Subscribe(callback: ICallback<any>): ISubscriptionLike<any>;
    interval10Subscribe(callback: ICallback<any>): ISubscriptionLike<any>;
    intervalCustom(callback: ICallback<any>, delay: milliseconds): ISubscriptionLike<any>;
    timeout(callback: ICallback<any>, delay: milliseconds): void;
}
